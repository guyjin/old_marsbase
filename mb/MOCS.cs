//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace mb {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class MOCS : DataSet {
        
        private tblMOCSDataTable tabletblMOCS;
        
        private tblImagesDataTable tabletblImages;
        
        public MOCS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected MOCS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["tblMOCS"] != null)) {
                    this.Tables.Add(new tblMOCSDataTable(ds.Tables["tblMOCS"]));
                }
                if ((ds.Tables["tblImages"] != null)) {
                    this.Tables.Add(new tblImagesDataTable(ds.Tables["tblImages"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblMOCSDataTable tblMOCS {
            get {
                return this.tabletblMOCS;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tblImagesDataTable tblImages {
            get {
                return this.tabletblImages;
            }
        }
        
        public override DataSet Clone() {
            MOCS cln = ((MOCS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["tblMOCS"] != null)) {
                this.Tables.Add(new tblMOCSDataTable(ds.Tables["tblMOCS"]));
            }
            if ((ds.Tables["tblImages"] != null)) {
                this.Tables.Add(new tblImagesDataTable(ds.Tables["tblImages"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tabletblMOCS = ((tblMOCSDataTable)(this.Tables["tblMOCS"]));
            if ((this.tabletblMOCS != null)) {
                this.tabletblMOCS.InitVars();
            }
            this.tabletblImages = ((tblImagesDataTable)(this.Tables["tblImages"]));
            if ((this.tabletblImages != null)) {
                this.tabletblImages.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "MOCS";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/MOCS.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tabletblMOCS = new tblMOCSDataTable();
            this.Tables.Add(this.tabletblMOCS);
            this.tabletblImages = new tblImagesDataTable();
            this.Tables.Add(this.tabletblImages);
        }
        
        private bool ShouldSerializetblMOCS() {
            return false;
        }
        
        private bool ShouldSerializetblImages() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void tblMOCSRowChangeEventHandler(object sender, tblMOCSRowChangeEvent e);
        
        public delegate void tblImagesRowChangeEventHandler(object sender, tblImagesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblMOCSDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnmoc_name;
            
            private DataColumn columnmoc_desig;
            
            private DataColumn columnteam;
            
            private DataColumn columninstructions_filename;
            
            internal tblMOCSDataTable() : 
                    base("tblMOCS") {
                this.InitClass();
            }
            
            internal tblMOCSDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn moc_nameColumn {
                get {
                    return this.columnmoc_name;
                }
            }
            
            internal DataColumn moc_desigColumn {
                get {
                    return this.columnmoc_desig;
                }
            }
            
            internal DataColumn teamColumn {
                get {
                    return this.columnteam;
                }
            }
            
            internal DataColumn instructions_filenameColumn {
                get {
                    return this.columninstructions_filename;
                }
            }
            
            public tblMOCSRow this[int index] {
                get {
                    return ((tblMOCSRow)(this.Rows[index]));
                }
            }
            
            public event tblMOCSRowChangeEventHandler tblMOCSRowChanged;
            
            public event tblMOCSRowChangeEventHandler tblMOCSRowChanging;
            
            public event tblMOCSRowChangeEventHandler tblMOCSRowDeleted;
            
            public event tblMOCSRowChangeEventHandler tblMOCSRowDeleting;
            
            public void AddtblMOCSRow(tblMOCSRow row) {
                this.Rows.Add(row);
            }
            
            public tblMOCSRow AddtblMOCSRow(string moc_name, string moc_desig, string team, System.Byte[] instructions_filename) {
                tblMOCSRow rowtblMOCSRow = ((tblMOCSRow)(this.NewRow()));
                rowtblMOCSRow.ItemArray = new object[] {
                        null,
                        moc_name,
                        moc_desig,
                        team,
                        instructions_filename};
                this.Rows.Add(rowtblMOCSRow);
                return rowtblMOCSRow;
            }
            
            public tblMOCSRow FindByID(int ID) {
                return ((tblMOCSRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tblMOCSDataTable cln = ((tblMOCSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tblMOCSDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnmoc_name = this.Columns["moc_name"];
                this.columnmoc_desig = this.Columns["moc_desig"];
                this.columnteam = this.Columns["team"];
                this.columninstructions_filename = this.Columns["instructions_filename"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnmoc_name = new DataColumn("moc_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmoc_name);
                this.columnmoc_desig = new DataColumn("moc_desig", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmoc_desig);
                this.columnteam = new DataColumn("team", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnteam);
                this.columninstructions_filename = new DataColumn("instructions_filename", typeof(System.Byte[]), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columninstructions_filename);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnmoc_name.AllowDBNull = false;
            }
            
            public tblMOCSRow NewtblMOCSRow() {
                return ((tblMOCSRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tblMOCSRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tblMOCSRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblMOCSRowChanged != null)) {
                    this.tblMOCSRowChanged(this, new tblMOCSRowChangeEvent(((tblMOCSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblMOCSRowChanging != null)) {
                    this.tblMOCSRowChanging(this, new tblMOCSRowChangeEvent(((tblMOCSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblMOCSRowDeleted != null)) {
                    this.tblMOCSRowDeleted(this, new tblMOCSRowChangeEvent(((tblMOCSRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblMOCSRowDeleting != null)) {
                    this.tblMOCSRowDeleting(this, new tblMOCSRowChangeEvent(((tblMOCSRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetblMOCSRow(tblMOCSRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblMOCSRow : DataRow {
            
            private tblMOCSDataTable tabletblMOCS;
            
            internal tblMOCSRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblMOCS = ((tblMOCSDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tabletblMOCS.IDColumn]));
                }
                set {
                    this[this.tabletblMOCS.IDColumn] = value;
                }
            }
            
            public string moc_name {
                get {
                    return ((string)(this[this.tabletblMOCS.moc_nameColumn]));
                }
                set {
                    this[this.tabletblMOCS.moc_nameColumn] = value;
                }
            }
            
            public string moc_desig {
                get {
                    try {
                        return ((string)(this[this.tabletblMOCS.moc_desigColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblMOCS.moc_desigColumn] = value;
                }
            }
            
            public string team {
                get {
                    try {
                        return ((string)(this[this.tabletblMOCS.teamColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblMOCS.teamColumn] = value;
                }
            }
            
            public System.Byte[] instructions_filename {
                get {
                    try {
                        return ((System.Byte[])(this[this.tabletblMOCS.instructions_filenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblMOCS.instructions_filenameColumn] = value;
                }
            }
            
            public bool Ismoc_desigNull() {
                return this.IsNull(this.tabletblMOCS.moc_desigColumn);
            }
            
            public void Setmoc_desigNull() {
                this[this.tabletblMOCS.moc_desigColumn] = System.Convert.DBNull;
            }
            
            public bool IsteamNull() {
                return this.IsNull(this.tabletblMOCS.teamColumn);
            }
            
            public void SetteamNull() {
                this[this.tabletblMOCS.teamColumn] = System.Convert.DBNull;
            }
            
            public bool Isinstructions_filenameNull() {
                return this.IsNull(this.tabletblMOCS.instructions_filenameColumn);
            }
            
            public void Setinstructions_filenameNull() {
                this[this.tabletblMOCS.instructions_filenameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblMOCSRowChangeEvent : EventArgs {
            
            private tblMOCSRow eventRow;
            
            private DataRowAction eventAction;
            
            public tblMOCSRowChangeEvent(tblMOCSRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tblMOCSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblImagesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnfilename;
            
            private DataColumn columnmodelID;
            
            private DataColumn columnthumbnail;
            
            private DataColumn columnExpr1;
            
            private DataColumn columnimageID;
            
            private DataColumn columntext;
            
            private DataColumn columnmoc_name;
            
            private DataColumn columnmoc_desig;
            
            private DataColumn columnExpr2;
            
            private DataColumn columnExpr3;
            
            internal tblImagesDataTable() : 
                    base("tblImages") {
                this.InitClass();
            }
            
            internal tblImagesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn filenameColumn {
                get {
                    return this.columnfilename;
                }
            }
            
            internal DataColumn modelIDColumn {
                get {
                    return this.columnmodelID;
                }
            }
            
            internal DataColumn thumbnailColumn {
                get {
                    return this.columnthumbnail;
                }
            }
            
            internal DataColumn Expr1Column {
                get {
                    return this.columnExpr1;
                }
            }
            
            internal DataColumn imageIDColumn {
                get {
                    return this.columnimageID;
                }
            }
            
            internal DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            internal DataColumn moc_nameColumn {
                get {
                    return this.columnmoc_name;
                }
            }
            
            internal DataColumn moc_desigColumn {
                get {
                    return this.columnmoc_desig;
                }
            }
            
            internal DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            internal DataColumn Expr3Column {
                get {
                    return this.columnExpr3;
                }
            }
            
            public tblImagesRow this[int index] {
                get {
                    return ((tblImagesRow)(this.Rows[index]));
                }
            }
            
            public event tblImagesRowChangeEventHandler tblImagesRowChanged;
            
            public event tblImagesRowChangeEventHandler tblImagesRowChanging;
            
            public event tblImagesRowChangeEventHandler tblImagesRowDeleted;
            
            public event tblImagesRowChangeEventHandler tblImagesRowDeleting;
            
            public void AddtblImagesRow(tblImagesRow row) {
                this.Rows.Add(row);
            }
            
            public tblImagesRow AddtblImagesRow(string filename, int modelID, string thumbnail, int Expr1, int imageID, string text, string moc_name, string moc_desig) {
                tblImagesRow rowtblImagesRow = ((tblImagesRow)(this.NewRow()));
                rowtblImagesRow.ItemArray = new object[] {
                        null,
                        filename,
                        modelID,
                        thumbnail,
                        Expr1,
                        imageID,
                        text,
                        moc_name,
                        moc_desig,
                        null,
                        null};
                this.Rows.Add(rowtblImagesRow);
                return rowtblImagesRow;
            }
            
            public tblImagesRow FindByIDExpr2Expr3(int ID, int Expr2, int Expr3) {
                return ((tblImagesRow)(this.Rows.Find(new object[] {
                            ID,
                            Expr2,
                            Expr3})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                tblImagesDataTable cln = ((tblImagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new tblImagesDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnfilename = this.Columns["filename"];
                this.columnmodelID = this.Columns["modelID"];
                this.columnthumbnail = this.Columns["thumbnail"];
                this.columnExpr1 = this.Columns["Expr1"];
                this.columnimageID = this.Columns["imageID"];
                this.columntext = this.Columns["text"];
                this.columnmoc_name = this.Columns["moc_name"];
                this.columnmoc_desig = this.Columns["moc_desig"];
                this.columnExpr2 = this.Columns["Expr2"];
                this.columnExpr3 = this.Columns["Expr3"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnfilename = new DataColumn("filename", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnfilename);
                this.columnmodelID = new DataColumn("modelID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmodelID);
                this.columnthumbnail = new DataColumn("thumbnail", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnthumbnail);
                this.columnExpr1 = new DataColumn("Expr1", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr1);
                this.columnimageID = new DataColumn("imageID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnimageID);
                this.columntext = new DataColumn("text", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntext);
                this.columnmoc_name = new DataColumn("moc_name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmoc_name);
                this.columnmoc_desig = new DataColumn("moc_desig", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnmoc_desig);
                this.columnExpr2 = new DataColumn("Expr2", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr2);
                this.columnExpr3 = new DataColumn("Expr3", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExpr3);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnID,
                                this.columnExpr2,
                                this.columnExpr3}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnmoc_name.AllowDBNull = false;
                this.columnExpr2.AutoIncrement = true;
                this.columnExpr2.AllowDBNull = false;
                this.columnExpr2.ReadOnly = true;
                this.columnExpr3.AutoIncrement = true;
                this.columnExpr3.AllowDBNull = false;
                this.columnExpr3.ReadOnly = true;
            }
            
            public tblImagesRow NewtblImagesRow() {
                return ((tblImagesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new tblImagesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(tblImagesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tblImagesRowChanged != null)) {
                    this.tblImagesRowChanged(this, new tblImagesRowChangeEvent(((tblImagesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tblImagesRowChanging != null)) {
                    this.tblImagesRowChanging(this, new tblImagesRowChangeEvent(((tblImagesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tblImagesRowDeleted != null)) {
                    this.tblImagesRowDeleted(this, new tblImagesRowChangeEvent(((tblImagesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tblImagesRowDeleting != null)) {
                    this.tblImagesRowDeleting(this, new tblImagesRowChangeEvent(((tblImagesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetblImagesRow(tblImagesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblImagesRow : DataRow {
            
            private tblImagesDataTable tabletblImages;
            
            internal tblImagesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletblImages = ((tblImagesDataTable)(this.Table));
            }
            
            public int ID {
                get {
                    return ((int)(this[this.tabletblImages.IDColumn]));
                }
                set {
                    this[this.tabletblImages.IDColumn] = value;
                }
            }
            
            public string filename {
                get {
                    try {
                        return ((string)(this[this.tabletblImages.filenameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.filenameColumn] = value;
                }
            }
            
            public int modelID {
                get {
                    try {
                        return ((int)(this[this.tabletblImages.modelIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.modelIDColumn] = value;
                }
            }
            
            public string thumbnail {
                get {
                    try {
                        return ((string)(this[this.tabletblImages.thumbnailColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.thumbnailColumn] = value;
                }
            }
            
            public int Expr1 {
                get {
                    try {
                        return ((int)(this[this.tabletblImages.Expr1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.Expr1Column] = value;
                }
            }
            
            public int imageID {
                get {
                    try {
                        return ((int)(this[this.tabletblImages.imageIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.imageIDColumn] = value;
                }
            }
            
            public string text {
                get {
                    try {
                        return ((string)(this[this.tabletblImages.textColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.textColumn] = value;
                }
            }
            
            public string moc_name {
                get {
                    return ((string)(this[this.tabletblImages.moc_nameColumn]));
                }
                set {
                    this[this.tabletblImages.moc_nameColumn] = value;
                }
            }
            
            public string moc_desig {
                get {
                    try {
                        return ((string)(this[this.tabletblImages.moc_desigColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletblImages.moc_desigColumn] = value;
                }
            }
            
            public int Expr2 {
                get {
                    return ((int)(this[this.tabletblImages.Expr2Column]));
                }
                set {
                    this[this.tabletblImages.Expr2Column] = value;
                }
            }
            
            public int Expr3 {
                get {
                    return ((int)(this[this.tabletblImages.Expr3Column]));
                }
                set {
                    this[this.tabletblImages.Expr3Column] = value;
                }
            }
            
            public bool IsfilenameNull() {
                return this.IsNull(this.tabletblImages.filenameColumn);
            }
            
            public void SetfilenameNull() {
                this[this.tabletblImages.filenameColumn] = System.Convert.DBNull;
            }
            
            public bool IsmodelIDNull() {
                return this.IsNull(this.tabletblImages.modelIDColumn);
            }
            
            public void SetmodelIDNull() {
                this[this.tabletblImages.modelIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsthumbnailNull() {
                return this.IsNull(this.tabletblImages.thumbnailColumn);
            }
            
            public void SetthumbnailNull() {
                this[this.tabletblImages.thumbnailColumn] = System.Convert.DBNull;
            }
            
            public bool IsExpr1Null() {
                return this.IsNull(this.tabletblImages.Expr1Column);
            }
            
            public void SetExpr1Null() {
                this[this.tabletblImages.Expr1Column] = System.Convert.DBNull;
            }
            
            public bool IsimageIDNull() {
                return this.IsNull(this.tabletblImages.imageIDColumn);
            }
            
            public void SetimageIDNull() {
                this[this.tabletblImages.imageIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstextNull() {
                return this.IsNull(this.tabletblImages.textColumn);
            }
            
            public void SettextNull() {
                this[this.tabletblImages.textColumn] = System.Convert.DBNull;
            }
            
            public bool Ismoc_desigNull() {
                return this.IsNull(this.tabletblImages.moc_desigColumn);
            }
            
            public void Setmoc_desigNull() {
                this[this.tabletblImages.moc_desigColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class tblImagesRowChangeEvent : EventArgs {
            
            private tblImagesRow eventRow;
            
            private DataRowAction eventAction;
            
            public tblImagesRowChangeEvent(tblImagesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public tblImagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
